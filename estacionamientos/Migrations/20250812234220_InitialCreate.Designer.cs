// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using estacionamientos.Data;

#nullable disable

namespace estacionamientos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250812234220_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Documento")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Conductores");
                });

            modelBuilder.Entity("estacionamientos.Models.Ocupacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConductorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HoraEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("HoraSalida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ImporteCalculado")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("PlazaEstacionamientoId")
                        .HasColumnType("integer");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConductorId");

                    b.HasIndex("PlazaEstacionamientoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Ocupaciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Autorizacion")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Metodo")
                        .HasColumnType("integer");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("OcupacionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OcupacionId")
                        .IsUnique();

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("estacionamientos.Models.PlayaEstacionamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("LlaveRequerida")
                        .HasColumnType("boolean");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TipoPiso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ValoracionPromedio")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Playas");
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaEstacionamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("boolean");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("EsCubierta")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsReservada")
                        .HasColumnType("boolean");

                    b.Property<string>("Nivel")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PlayaEstacionamientoId")
                        .HasColumnType("integer");

                    b.Property<string>("Sector")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("PlayaEstacionamientoId", "Codigo")
                        .IsUnique();

                    b.ToTable("Plazas");
                });

            modelBuilder.Entity("estacionamientos.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("PlayaEstacionamientoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlayaEstacionamientoId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("estacionamientos.Models.Tarifario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Clasificacion")
                        .HasColumnType("integer");

                    b.Property<int>("FraccionMin")
                        .HasColumnType("integer");

                    b.Property<decimal>("MontoFraccion")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("MontoHora")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("PlayaEstacionamientoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayaEstacionamientoId");

                    b.ToTable("Tarifarios");
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Marca")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Modelo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Patente")
                        .IsUnique();

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("estacionamientos.Models.Ocupacion", b =>
                {
                    b.HasOne("estacionamientos.Models.Conductor", "Conductor")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("ConductorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("estacionamientos.Models.PlazaEstacionamiento", "Plaza")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("PlazaEstacionamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Vehiculo", "Vehiculo")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conductor");

                    b.Navigation("Plaza");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("estacionamientos.Models.Pago", b =>
                {
                    b.HasOne("estacionamientos.Models.Ocupacion", "Ocupacion")
                        .WithOne("Pago")
                        .HasForeignKey("estacionamientos.Models.Pago", "OcupacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ocupacion");
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaEstacionamiento", b =>
                {
                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Plazas")
                        .HasForeignKey("PlayaEstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.Servicio", b =>
                {
                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Servicios")
                        .HasForeignKey("PlayaEstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.Tarifario", b =>
                {
                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Tarifas")
                        .HasForeignKey("PlayaEstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.Navigation("Ocupaciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Ocupacion", b =>
                {
                    b.Navigation("Pago");
                });

            modelBuilder.Entity("estacionamientos.Models.PlayaEstacionamiento", b =>
                {
                    b.Navigation("Plazas");

                    b.Navigation("Servicios");

                    b.Navigation("Tarifas");
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaEstacionamiento", b =>
                {
                    b.Navigation("Ocupaciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.Navigation("Ocupaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
