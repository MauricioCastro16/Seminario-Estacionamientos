// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using estacionamientos.Data;

#nullable disable

namespace estacionamientos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925160333_Migration_2025-09-25_13-02")]
    partial class Migration_20250925_1302
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("estacionamientos.Models.Abonado", b =>
                {
                    b.Property<string>("AboDNI")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("AboNom")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int?>("ConNU")
                        .HasColumnType("integer");

                    b.HasKey("AboDNI");

                    b.HasIndex("ConNU");

                    b.ToTable("Abonado", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Abono", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlzNum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AboFyhIni")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AboDNI")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime?>("AboFyhFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PagNum")
                        .HasColumnType("integer");

                    b.HasKey("PlyID", "PlzNum", "AboFyhIni");

                    b.HasIndex("AboDNI");

                    b.HasIndex("PlyID", "PagNum");

                    b.ToTable("Abono", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.AceptaMetodoPago", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("MepID")
                        .HasColumnType("integer");

                    b.Property<bool>("AmpHab")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("PlyID", "MepID");

                    b.HasIndex("MepID");

                    b.ToTable("AceptaMetodoPago", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.AdministraPlaya", b =>
                {
                    b.Property<int>("DueNU")
                        .HasColumnType("integer");

                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.HasKey("DueNU", "PlyID");

                    b.HasIndex("PlyID");

                    b.ToTable("AdministraPlaya", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.ClasificacionDias", b =>
                {
                    b.Property<int>("ClaDiasID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClaDiasID"));

                    b.Property<string>("ClaDiasDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClaDiasTipo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("ClaDiasID");

                    b.HasIndex("ClaDiasTipo")
                        .IsUnique();

                    b.ToTable("ClasificacionDias", (string)null);

                    b.HasData(
                        new
                        {
                            ClaDiasID = 1,
                            ClaDiasDesc = "Lunes a Viernes",
                            ClaDiasTipo = "Hábil"
                        },
                        new
                        {
                            ClaDiasID = 2,
                            ClaDiasDesc = "Sábado y Domingo",
                            ClaDiasTipo = "Fin de semana"
                        },
                        new
                        {
                            ClaDiasID = 3,
                            ClaDiasDesc = "Feriados no laborables",
                            ClaDiasTipo = "Feriado"
                        });
                });

            modelBuilder.Entity("estacionamientos.Models.ClasificacionVehiculo", b =>
                {
                    b.Property<int>("ClasVehID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClasVehID"));

                    b.Property<string>("ClasVehDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClasVehTipo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("ClasVehID");

                    b.HasIndex("ClasVehTipo")
                        .IsUnique();

                    b.ToTable("ClasificacionVehiculo", (string)null);

                    b.HasData(
                        new
                        {
                            ClasVehID = 1,
                            ClasVehDesc = "Vehículo de pasajeros",
                            ClasVehTipo = "Automóvil"
                        },
                        new
                        {
                            ClasVehID = 2,
                            ClasVehDesc = "Vehículo utilitario",
                            ClasVehTipo = "Camioneta"
                        },
                        new
                        {
                            ClasVehID = 3,
                            ClasVehDesc = "Vehículo de carga",
                            ClasVehTipo = "Camión"
                        },
                        new
                        {
                            ClasVehID = 4,
                            ClasVehDesc = "Vehículo de dos ruedas",
                            ClasVehTipo = "Motocicleta"
                        });
                });

            modelBuilder.Entity("estacionamientos.Models.Conduce", b =>
                {
                    b.Property<int>("ConNU")
                        .HasColumnType("integer");

                    b.Property<string>("VehPtnt")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ConNU", "VehPtnt");

                    b.HasIndex("VehPtnt");

                    b.ToTable("Conduce", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Horario", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("ClaDiasID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("HorFyhIni")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("HorFyhFin")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlyID", "ClaDiasID", "HorFyhIni");

                    b.HasIndex("ClaDiasID");

                    b.HasIndex("PlyID", "ClaDiasID", "HorFyhIni");

                    b.ToTable("Horario", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.MetodoPago", b =>
                {
                    b.Property<int>("MepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MepID"));

                    b.Property<string>("MepDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MepNom")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("MepID");

                    b.HasIndex("MepNom")
                        .IsUnique();

                    b.ToTable("MetodoPago", (string)null);

                    b.HasData(
                        new
                        {
                            MepID = 1,
                            MepDesc = "Pago en efectivo",
                            MepNom = "Efectivo"
                        },
                        new
                        {
                            MepID = 2,
                            MepDesc = "Pago con tarjeta de crédito",
                            MepNom = "Tarjeta de crédito"
                        },
                        new
                        {
                            MepID = 3,
                            MepDesc = "Pago con tarjeta de débito",
                            MepNom = "Tarjeta de débito"
                        },
                        new
                        {
                            MepID = 4,
                            MepDesc = "Pago mediante transferencia bancaria",
                            MepNom = "Transferencia bancaria"
                        });
                });

            modelBuilder.Entity("estacionamientos.Models.Ocupacion", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlzNum")
                        .HasColumnType("integer");

                    b.Property<string>("VehPtnt")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("OcufFyhIni")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("OcuLlavDej")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("OcufFyhFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PagNum")
                        .HasColumnType("integer");

                    b.Property<int?>("PagoPagNum")
                        .HasColumnType("integer");

                    b.Property<int?>("PagoPlyID")
                        .HasColumnType("integer");

                    b.HasKey("PlyID", "PlzNum", "VehPtnt", "OcufFyhIni");

                    b.HasIndex("PagoPlyID", "PagoPagNum");

                    b.HasIndex("PlyID", "PagNum");

                    b.HasIndex("VehPtnt", "OcufFyhIni");

                    b.HasIndex("PlyID", "PlzNum", "OcufFyhIni");

                    b.ToTable("Ocupacion", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Pago", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PagNum")
                        .HasColumnType("integer");

                    b.Property<int?>("AceptaMetodoPagoMepID")
                        .HasColumnType("integer");

                    b.Property<int?>("AceptaMetodoPagoPlyID")
                        .HasColumnType("integer");

                    b.Property<int>("MepID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PagFyh")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PagMonto")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("PlyID", "PagNum");

                    b.HasIndex("MepID");

                    b.HasIndex("AceptaMetodoPagoPlyID", "AceptaMetodoPagoMepID");

                    b.HasIndex("PlyID", "MepID");

                    b.HasIndex("PlyID", "PagFyh");

                    b.ToTable("Pago", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.PlayaEstacionamiento", b =>
                {
                    b.Property<int>("PlyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlyID"));

                    b.Property<string>("PlyCiu")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("PlyCiuId")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("PlyDir")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<decimal?>("PlyLat")
                        .HasColumnType("numeric");

                    b.Property<bool>("PlyLlavReq")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("PlyLon")
                        .HasColumnType("numeric");

                    b.Property<string>("PlyNom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlyProv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PlyProvId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlyTipoPiso")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("PlyValProm")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("PlyID");

                    b.ToTable("PlayaEstacionamiento", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaClasificacion", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlzNum")
                        .HasColumnType("integer");

                    b.Property<int>("ClasVehID")
                        .HasColumnType("integer");

                    b.HasKey("PlyID", "PlzNum", "ClasVehID");

                    b.HasIndex("ClasVehID");

                    b.ToTable("PlazaClasificacion", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaEstacionamiento", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlzNum")
                        .HasColumnType("integer");

                    b.Property<int?>("Piso")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PlzAlt")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<bool>("PlzHab")
                        .HasColumnType("boolean");

                    b.Property<string>("PlzNombre")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<bool>("PlzOcupada")
                        .HasColumnType("boolean");

                    b.Property<bool>("PlzTecho")
                        .HasColumnType("boolean");

                    b.HasKey("PlyID", "PlzNum");

                    b.ToTable("PlazaEstacionamiento", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Servicio", b =>
                {
                    b.Property<int>("SerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SerID"));

                    b.Property<string>("SerDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SerNom")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("SerTipo")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("SerID");

                    b.HasIndex("SerNom")
                        .IsUnique();

                    b.ToTable("Servicio", (string)null);

                    b.HasData(
                        new
                        {
                            SerID = 1,
                            SerDesc = "Lavado exterior e interior del vehículo",
                            SerNom = "Lavado de vehículo",
                            SerTipo = "ServicioExtra"
                        },
                        new
                        {
                            SerID = 2,
                            SerDesc = "Revisión y mantenimiento mecánico del vehículo",
                            SerNom = "Mantenimiento de vehículo",
                            SerTipo = "ServicioExtra"
                        },
                        new
                        {
                            SerID = 3,
                            SerDesc = "Carga de combustible en el vehículo",
                            SerNom = "Carga de combustible",
                            SerTipo = "ServicioExtra"
                        },
                        new
                        {
                            SerID = 4,
                            SerDesc = "Revisión técnica del vehículo para verificar su estado",
                            SerNom = "Revisión técnica",
                            SerTipo = "ServicioExtra"
                        },
                        new
                        {
                            SerID = 5,
                            SerDesc = "Servicio de estacionamiento por 1 hora en playa",
                            SerNom = "Estacionamiento por 1 Hora",
                            SerTipo = "Estacionamiento"
                        },
                        new
                        {
                            SerID = 6,
                            SerDesc = "Servicio de estacionamiento por 6 horas en playa",
                            SerNom = "Estacionamiento por 6 Horas",
                            SerTipo = "Estacionamiento"
                        },
                        new
                        {
                            SerID = 7,
                            SerDesc = "Servicio de estacionamiento por 1 día en playa",
                            SerNom = "Estacionamiento por 1 Día",
                            SerTipo = "Estacionamiento"
                        },
                        new
                        {
                            SerID = 8,
                            SerDesc = "Servicio de estacionamiento por 1 semana en playa",
                            SerNom = "Estacionamiento por 1 Semana",
                            SerTipo = "Estacionamiento"
                        },
                        new
                        {
                            SerID = 9,
                            SerDesc = "Servicio de estacionamiento por 1 mes en playa",
                            SerNom = "Estacionamiento por 1 Mes",
                            SerTipo = "Estacionamiento"
                        });
                });

            modelBuilder.Entity("estacionamientos.Models.ServicioExtraRealizado", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("SerID")
                        .HasColumnType("integer");

                    b.Property<string>("VehPtnt")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("ServExFyHIni")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PagNum")
                        .HasColumnType("integer");

                    b.Property<int?>("PagoPagNum")
                        .HasColumnType("integer");

                    b.Property<int?>("PagoPlyID")
                        .HasColumnType("integer");

                    b.Property<string>("ServExComp")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ServExFyHFin")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlyID", "SerID", "VehPtnt", "ServExFyHIni");

                    b.HasIndex("VehPtnt");

                    b.HasIndex("PagoPlyID", "PagoPagNum");

                    b.HasIndex("PlyID", "PagNum");

                    b.HasIndex("PlyID", "SerID", "ServExFyHIni");

                    b.ToTable("ServicioExtraRealizado", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.ServicioProveido", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("SerID")
                        .HasColumnType("integer");

                    b.Property<bool>("SerProvHab")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("PlyID", "SerID");

                    b.HasIndex("SerID");

                    b.ToTable("ServicioProveido", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.TarifaServicio", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("SerID")
                        .HasColumnType("integer");

                    b.Property<int>("ClasVehID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TasFecIni")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("TasFecFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TasMonto")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("PlyID", "SerID", "ClasVehID", "TasFecIni");

                    b.HasIndex("ClasVehID");

                    b.HasIndex("PlyID", "SerID", "ClasVehID", "TasFecIni");

                    b.ToTable("TarifaServicio", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.TrabajaEn", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlaNU")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("TrabEnActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("PlyID", "PlaNU", "FechaInicio");

                    b.HasIndex("PlaNU");

                    b.HasIndex("PlyID", "PlaNU")
                        .IsUnique()
                        .HasFilter("\"FechaFin\" IS NULL");

                    b.ToTable("TrabajaEn", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Turno", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlaNU")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TurFyhIni")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("TrabFyhIni")
                        .HasColumnType("timestamptz");

                    b.Property<decimal?>("TurApertCaja")
                        .HasColumnType("numeric(12,2)");

                    b.Property<decimal?>("TurCierrCaja")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime?>("TurFyhFin")
                        .HasColumnType("timestamptz");

                    b.HasKey("PlyID", "PlaNU", "TurFyhIni");

                    b.HasIndex("PlaNU");

                    b.HasIndex("PlyID", "TurFyhIni");

                    b.HasIndex("PlyID", "PlaNU", "TrabFyhIni");

                    b.ToTable("Turno", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.UbicacionFavorita", b =>
                {
                    b.Property<int>("ConNU")
                        .HasColumnType("integer");

                    b.Property<string>("UbfApodo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UbfCiu")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UbfDir")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("UbfProv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UbfTipo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("ConNU", "UbfApodo");

                    b.ToTable("UbicacionFavorita", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Usuario", b =>
                {
                    b.Property<int>("UsuNU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuNU"));

                    b.Property<string>("UsuEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("UsuNomUsu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UsuNumTel")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("UsuNyA")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("UsuPswd")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UsuNU");

                    b.HasIndex("UsuEmail")
                        .IsUnique();

                    b.HasIndex("UsuNomUsu")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("estacionamientos.Models.Valoracion", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("ConNU")
                        .HasColumnType("integer");

                    b.Property<bool>("ValFav")
                        .HasColumnType("boolean");

                    b.Property<int>("ValNumEst")
                        .HasColumnType("integer");

                    b.HasKey("PlyID", "ConNU");

                    b.HasIndex("ConNU");

                    b.ToTable("Valoracion", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.Property<string>("VehPtnt")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ClasVehID")
                        .HasColumnType("integer");

                    b.Property<string>("VehMarc")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("VehPtnt");

                    b.HasIndex("ClasVehID");

                    b.ToTable("Vehiculo", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.VehiculoAbonado", b =>
                {
                    b.Property<int>("PlyID")
                        .HasColumnType("integer");

                    b.Property<int>("PlzNum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AboFyhIni")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehPtnt")
                        .HasColumnType("character varying(10)");

                    b.HasKey("PlyID", "PlzNum", "AboFyhIni", "VehPtnt");

                    b.HasIndex("VehPtnt");

                    b.ToTable("VehiculoAbonado", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Administrador", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.ToTable("Administrador", (string)null);

                    b.HasData(
                        new
                        {
                            UsuNU = 1,
                            UsuEmail = "castromauricionicolas@hotmail.com",
                            UsuNomUsu = "MauriCastro",
                            UsuNumTel = "1234567890",
                            UsuNyA = "Mauricio Nicolás Castro",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 2,
                            UsuEmail = "brizuelajoelelian@gmail.com",
                            UsuNomUsu = "YoelBrizuela",
                            UsuNumTel = "0987654321",
                            UsuNyA = "Yoel Brizuela Silvestri",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 3,
                            UsuEmail = "nadineperaltaruiz@gmail.com",
                            UsuNomUsu = "NadinePeralta",
                            UsuNumTel = "1122334455",
                            UsuNyA = "Nadine Andrea Peralta Ruiz",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 4,
                            UsuEmail = "mateobeneyto@gmail.com",
                            UsuNomUsu = "MateoBeneyto",
                            UsuNumTel = "5566778899",
                            UsuNyA = "Mateo Beneyto",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 5,
                            UsuEmail = "ivan.nikcevich@hotmail.com",
                            UsuNomUsu = "IvanNikcevich",
                            UsuNumTel = "2233445566",
                            UsuNyA = "Iván Josué Nikcevich",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 6,
                            UsuEmail = "adri.nikce30@gmail.com",
                            UsuNomUsu = "AdrianoNikcevich",
                            UsuNumTel = "6677889900",
                            UsuNyA = "Adriano Nikcevich",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 7,
                            UsuEmail = "solana.livio1976@gmail.com",
                            UsuNomUsu = "SolanaLivio",
                            UsuNumTel = "3344556677",
                            UsuNyA = "Solana Livio",
                            UsuPswd = "12345678"
                        },
                        new
                        {
                            UsuNU = 8,
                            UsuEmail = "obregon.elias@gmail.com",
                            UsuNomUsu = "EliasObregon",
                            UsuNumTel = "7788990011",
                            UsuNyA = "Elías Obregón",
                            UsuPswd = "12345678"
                        });
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.ToTable("Conductor", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Duenio", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.Property<string>("DueCuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("DueCuit");

                    b.HasIndex("DueCuit")
                        .IsUnique();

                    b.ToTable("Duenio", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Playero", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.ToTable("Playero", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Abonado", b =>
                {
                    b.HasOne("estacionamientos.Models.Conductor", "Conductor")
                        .WithMany()
                        .HasForeignKey("ConNU")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Conductor");
                });

            modelBuilder.Entity("estacionamientos.Models.Abono", b =>
                {
                    b.HasOne("estacionamientos.Models.Abonado", "Abonado")
                        .WithMany("Abonos")
                        .HasForeignKey("AboDNI")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Pago", "Pago")
                        .WithMany()
                        .HasForeignKey("PlyID", "PagNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlazaEstacionamiento", "Plaza")
                        .WithMany("Abonos")
                        .HasForeignKey("PlyID", "PlzNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Abonado");

                    b.Navigation("Pago");

                    b.Navigation("Plaza");
                });

            modelBuilder.Entity("estacionamientos.Models.AceptaMetodoPago", b =>
                {
                    b.HasOne("estacionamientos.Models.MetodoPago", "MetodoPago")
                        .WithMany("Aceptaciones")
                        .HasForeignKey("MepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Aceptaciones")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetodoPago");

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.AdministraPlaya", b =>
                {
                    b.HasOne("estacionamientos.Models.Duenio", "Duenio")
                        .WithMany("Administraciones")
                        .HasForeignKey("DueNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Administradores")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duenio");

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.Conduce", b =>
                {
                    b.HasOne("estacionamientos.Models.Conductor", "Conductor")
                        .WithMany("Conducciones")
                        .HasForeignKey("ConNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Vehiculo", "Vehiculo")
                        .WithMany("Conducciones")
                        .HasForeignKey("VehPtnt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("estacionamientos.Models.Horario", b =>
                {
                    b.HasOne("estacionamientos.Models.ClasificacionDias", "ClasificacionDias")
                        .WithMany("Horarios")
                        .HasForeignKey("ClaDiasID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Horarios")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasificacionDias");

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.Ocupacion", b =>
                {
                    b.HasOne("estacionamientos.Models.Vehiculo", "Vehiculo")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("VehPtnt")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Pago", null)
                        .WithMany("Ocupaciones")
                        .HasForeignKey("PagoPlyID", "PagoPagNum");

                    b.HasOne("estacionamientos.Models.Pago", "Pago")
                        .WithMany()
                        .HasForeignKey("PlyID", "PagNum")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("estacionamientos.Models.PlazaEstacionamiento", "Plaza")
                        .WithMany("Ocupaciones")
                        .HasForeignKey("PlyID", "PlzNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pago");

                    b.Navigation("Plaza");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("estacionamientos.Models.Pago", b =>
                {
                    b.HasOne("estacionamientos.Models.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MepID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Pagos")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.AceptaMetodoPago", null)
                        .WithMany("Pagos")
                        .HasForeignKey("AceptaMetodoPagoPlyID", "AceptaMetodoPagoMepID");

                    b.HasOne("estacionamientos.Models.AceptaMetodoPago", "AceptaMetodoPago")
                        .WithMany()
                        .HasForeignKey("PlyID", "MepID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AceptaMetodoPago");

                    b.Navigation("MetodoPago");

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaClasificacion", b =>
                {
                    b.HasOne("estacionamientos.Models.ClasificacionVehiculo", "Clasificacion")
                        .WithMany()
                        .HasForeignKey("ClasVehID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlazaEstacionamiento", "Plaza")
                        .WithMany("Clasificaciones")
                        .HasForeignKey("PlyID", "PlzNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clasificacion");

                    b.Navigation("Plaza");
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaEstacionamiento", b =>
                {
                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Plazas")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.ServicioExtraRealizado", b =>
                {
                    b.HasOne("estacionamientos.Models.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehPtnt")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Pago", null)
                        .WithMany("ServiciosExtras")
                        .HasForeignKey("PagoPlyID", "PagoPagNum");

                    b.HasOne("estacionamientos.Models.Pago", "Pago")
                        .WithMany()
                        .HasForeignKey("PlyID", "PagNum")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("estacionamientos.Models.ServicioProveido", "ServicioProveido")
                        .WithMany("ServiciosExtras")
                        .HasForeignKey("PlyID", "SerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pago");

                    b.Navigation("ServicioProveido");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("estacionamientos.Models.ServicioProveido", b =>
                {
                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("ServiciosProveidos")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Servicio", "Servicio")
                        .WithMany("Proveidos")
                        .HasForeignKey("SerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playa");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("estacionamientos.Models.TarifaServicio", b =>
                {
                    b.HasOne("estacionamientos.Models.ClasificacionVehiculo", "ClasificacionVehiculo")
                        .WithMany()
                        .HasForeignKey("ClasVehID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.ServicioProveido", "ServicioProveido")
                        .WithMany("Tarifas")
                        .HasForeignKey("PlyID", "SerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasificacionVehiculo");

                    b.Navigation("ServicioProveido");
                });

            modelBuilder.Entity("estacionamientos.Models.TrabajaEn", b =>
                {
                    b.HasOne("estacionamientos.Models.Playero", "Playero")
                        .WithMany()
                        .HasForeignKey("PlaNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany()
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playa");

                    b.Navigation("Playero");
                });

            modelBuilder.Entity("estacionamientos.Models.Turno", b =>
                {
                    b.HasOne("estacionamientos.Models.Playero", "Playero")
                        .WithMany()
                        .HasForeignKey("PlaNU")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany()
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.TrabajaEn", "TrabajaEn")
                        .WithMany()
                        .HasForeignKey("PlyID", "PlaNU", "TrabFyhIni")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Playa");

                    b.Navigation("Playero");

                    b.Navigation("TrabajaEn");
                });

            modelBuilder.Entity("estacionamientos.Models.UbicacionFavorita", b =>
                {
                    b.HasOne("estacionamientos.Models.Conductor", "Conductor")
                        .WithMany("UbicacionesFavoritas")
                        .HasForeignKey("ConNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");
                });

            modelBuilder.Entity("estacionamientos.Models.Valoracion", b =>
                {
                    b.HasOne("estacionamientos.Models.Conductor", "Conductor")
                        .WithMany("Valoraciones")
                        .HasForeignKey("ConNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.PlayaEstacionamiento", "Playa")
                        .WithMany("Valoraciones")
                        .HasForeignKey("PlyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");

                    b.Navigation("Playa");
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.HasOne("estacionamientos.Models.ClasificacionVehiculo", "Clasificacion")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClasVehID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clasificacion");
                });

            modelBuilder.Entity("estacionamientos.Models.VehiculoAbonado", b =>
                {
                    b.HasOne("estacionamientos.Models.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehPtnt")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Abono", "Abono")
                        .WithMany("Vehiculos")
                        .HasForeignKey("PlyID", "PlzNum", "AboFyhIni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abono");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("estacionamientos.Models.Administrador", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Administrador", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Conductor", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.Duenio", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Duenio", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.Playero", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Playero", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.Abonado", b =>
                {
                    b.Navigation("Abonos");
                });

            modelBuilder.Entity("estacionamientos.Models.Abono", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("estacionamientos.Models.AceptaMetodoPago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("estacionamientos.Models.ClasificacionDias", b =>
                {
                    b.Navigation("Horarios");
                });

            modelBuilder.Entity("estacionamientos.Models.ClasificacionVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("estacionamientos.Models.MetodoPago", b =>
                {
                    b.Navigation("Aceptaciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Pago", b =>
                {
                    b.Navigation("Ocupaciones");

                    b.Navigation("ServiciosExtras");
                });

            modelBuilder.Entity("estacionamientos.Models.PlayaEstacionamiento", b =>
                {
                    b.Navigation("Aceptaciones");

                    b.Navigation("Administradores");

                    b.Navigation("Horarios");

                    b.Navigation("Pagos");

                    b.Navigation("Plazas");

                    b.Navigation("ServiciosProveidos");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("estacionamientos.Models.PlazaEstacionamiento", b =>
                {
                    b.Navigation("Abonos");

                    b.Navigation("Clasificaciones");

                    b.Navigation("Ocupaciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Servicio", b =>
                {
                    b.Navigation("Proveidos");
                });

            modelBuilder.Entity("estacionamientos.Models.ServicioProveido", b =>
                {
                    b.Navigation("ServiciosExtras");

                    b.Navigation("Tarifas");
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.Navigation("Conducciones");

                    b.Navigation("Ocupaciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.Navigation("Conducciones");

                    b.Navigation("UbicacionesFavoritas");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Duenio", b =>
                {
                    b.Navigation("Administraciones");
                });
#pragma warning restore 612, 618
        }
    }
}
