// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using estacionamientos.Data;

#nullable disable

namespace estacionamientos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814151139_act1")]
    partial class act1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("estacionamientos.Models.ClasificacionVehiculo", b =>
                {
                    b.Property<int>("ClasVehID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClasVehID"));

                    b.Property<string>("ClasVehDesc")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ClasVehTipo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("ClasVehID");

                    b.HasIndex("ClasVehTipo")
                        .IsUnique();

                    b.ToTable("ClasificacionVehiculo", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Conduce", b =>
                {
                    b.Property<int>("ConNU")
                        .HasColumnType("integer");

                    b.Property<string>("VehPtnt")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ConNU", "VehPtnt");

                    b.HasIndex("VehPtnt");

                    b.ToTable("Conduce", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Usuario", b =>
                {
                    b.Property<int>("UsuNU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UsuNU");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuNU"));

                    b.Property<string>("UsuEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("UsuEmail");

                    b.Property<string>("UsuNumTel")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("UsuNumTel");

                    b.Property<string>("UsuNyA")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("UsuNyA");

                    b.Property<string>("UsuPswd")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("UsuPswd");

                    b.HasKey("UsuNU");

                    b.HasIndex("UsuEmail")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.Property<string>("VehPtnt")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ClasVehID")
                        .HasColumnType("integer");

                    b.Property<string>("VehMarc")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("VehPtnt");

                    b.HasIndex("ClasVehID");

                    b.ToTable("Vehiculo", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.ToTable("Conductor", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Duenio", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.Property<string>("DueCuit")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("DueCuit");

                    b.HasIndex("DueCuit")
                        .IsUnique();

                    b.ToTable("Duenio", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Playero", b =>
                {
                    b.HasBaseType("estacionamientos.Models.Usuario");

                    b.ToTable("Playero", (string)null);
                });

            modelBuilder.Entity("estacionamientos.Models.Conduce", b =>
                {
                    b.HasOne("estacionamientos.Models.Conductor", "Conductor")
                        .WithMany("Conducciones")
                        .HasForeignKey("ConNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("estacionamientos.Models.Vehiculo", "Vehiculo")
                        .WithMany("Conducciones")
                        .HasForeignKey("VehPtnt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.HasOne("estacionamientos.Models.ClasificacionVehiculo", "Clasificacion")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClasVehID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clasificacion");
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Conductor", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.Duenio", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Duenio", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.Playero", b =>
                {
                    b.HasOne("estacionamientos.Models.Usuario", null)
                        .WithOne()
                        .HasForeignKey("estacionamientos.Models.Playero", "UsuNU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("estacionamientos.Models.ClasificacionVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("estacionamientos.Models.Vehiculo", b =>
                {
                    b.Navigation("Conducciones");
                });

            modelBuilder.Entity("estacionamientos.Models.Conductor", b =>
                {
                    b.Navigation("Conducciones");
                });
#pragma warning restore 612, 618
        }
    }
}
