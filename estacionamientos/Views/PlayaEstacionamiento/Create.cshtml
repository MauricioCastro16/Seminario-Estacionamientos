@model estacionamientos.Models.PlayaEstacionamiento

@{
    ViewData["Title"] = "Alta estacionamiento";
}

<div class="container py-4" style="max-width: 760px">
    <h2 class="text-center mb-4">Registrar playa de estacionamiento</h2>

    <form asp-action="Create" method="post" class="needs-validation" novalidate id="formCreate">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        <!-- Nombre -->
        <div class="mb-3">
            <label asp-for="PlyNom" class="form-label">Nombre</label>
            <input asp-for="PlyNom" class="form-control" id="nombreInput" autocomplete="off" required />
            <span asp-validation-for="PlyNom" class="text-danger"></span>
        </div>

        <!-- Provincia (solo lectura, se completa desde el mapa) -->
        <div class="mb-3">
            <label asp-for="PlyProv" class="form-label">Provincia</label>
            <input asp-for="PlyProv" class="form-control" id="provinciaInput" readonly required />
            <input type="hidden" asp-for="PlyProvId" id="provIdHidden" />
            <span asp-validation-for="PlyProv" class="text-danger"></span>
        </div>

        <!-- Ciudad/Localidad (solo lectura, se completa desde el mapa) -->
        <div class="mb-3">
            <label asp-for="PlyCiu" class="form-label">Ciudad / Localidad</label>
            <input asp-for="PlyCiu" class="form-control" id="ciudadInput" readonly required />
            <input type="hidden" asp-for="PlyCiuId" id="ciuIdHidden" />
            <span asp-validation-for="PlyCiu" class="text-danger"></span>
        </div>

        <!-- Dirección (solo lectura, se completa desde el mapa) -->
        <div class="mb-3">
            <label asp-for="PlyDir" class="form-label">Dirección</label>
            <input asp-for="PlyDir" class="form-control" id="direccionInput" readonly required />
            <span asp-validation-for="PlyDir" class="text-danger"></span>
        </div>

        <!-- Mapa -->
        <div class="mb-3">
            <div id="map" style="height: 360px; border-radius: 12px; border: 1px solid #ddd; overflow:hidden;"></div>
            <input type="hidden" asp-for="PlyLat" id="latHidden" />
            <input type="hidden" asp-for="PlyLon" id="lonHidden" />
            <div class="form-text">Hacé clic en el mapa o arrastrá el marcador para elegir la ubicación.</div>
        </div>

        <!-- Tipo de piso -->
        <div class="mb-3">
            <label class="form-label">Tipo de piso <span class="text-muted">(opcional)</span></label>
            <input type="hidden" asp-for="PlyTipoPiso" id="pisoHidden" />
            <select class="form-select mb-2" id="pisoSelect" data-val="false">
                <option value="" selected>-- Selecciona una opción --</option>
                <option>Asfalto</option>
                <option>Ripio</option>
                <option>Tierra</option>
                <option value="__OTRO__">Otros (escribir)</option>
            </select>
            <input type="text" class="form-control d-none" id="pisoInput"
                   placeholder="Escribí el tipo de piso" autocomplete="off" />
            <span asp-validation-for="PlyTipoPiso" class="text-danger"></span>
        </div>

        <!-- Llave requerida -->
        <div class="mb-3">
            <label class="form-label d-block">Llave requerida</label>
            <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="PlyLlavReq" id="llaveSi" value="true">
                <label class="btn btn-outline-success" for="llaveSi">Sí</label>
                <input type="radio" class="btn-check" name="PlyLlavReq" id="llaveNo" value="false" checked>
                <label class="btn btn-outline-danger" for="llaveNo">No</label>
            </div>
            <span asp-validation-for="PlyLlavReq" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary w-100">Guardar</button>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <!-- Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <script>
        const $ = (id) => document.getElementById(id);
        const provinciaInput = $("provinciaInput");
        const ciudadInput    = $("ciudadInput");
        const direccionInput = $("direccionInput");
        const provIdHidden   = $("provIdHidden");
        const ciuIdHidden    = $("ciuIdHidden");
        const latHidden      = $("latHidden");
        const lonHidden      = $("lonHidden");

        // UTN FRRe (fallback) - Resistencia, Chaco
        const FALLBACK = { lat: -27.451000, lon: -58.986000, zoom: 14 };

        // Formatear decimales con coma para es-AR (para bindear decimal)
        function setLatLon(lat, lon) {
            const fmt = (n) => Number(n).toLocaleString('es-AR', { useGrouping: false, maximumFractionDigits: 6 });
            latHidden.value = fmt(lat);
            lonHidden.value = fmt(lon);
        }

        const debounce = (fn, wait = 600) => { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), wait); }; };

        // --- Mapa con tema (CartoDB Positron) ---
        const map = L.map("map", { zoomControl: false });
        // Posicion inicial provisoria (se ajusta con geoloc o fallback)
        map.setView([FALLBACK.lat, FALLBACK.lon], 5);

        // Tema lindo (CartoDB Positron)
        L.tileLayer("https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png", {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>, &copy; <a href="https://carto.com/attributions">CARTO</a>'
        }).addTo(map);

        // Controles: zoom arriba a la derecha + escala
        L.control.zoom({ position: 'topright' }).addTo(map);
        L.control.scale({ imperial: false }).addTo(map);

        // Marcador draggable
        let marker = L.marker([FALLBACK.lat, FALLBACK.lon], { draggable: true }).addTo(map);

        // Reverse geocoding: llena Provincia/Ciudad (con IDs) y Dirección
        const reverseFromMap = debounce(async (lat, lon) => {
            // 1) Provincia / Municipio / Departamento con georef (incluye IDs)
            try {
                const r = await fetch(`https://apis.datos.gob.ar/georef/api/ubicacion?lat=${lat}&lon=${lon}`);
                const d = await r.json();

                const prov = d?.ubicacion?.provincia || {};
                const muni = d?.ubicacion?.municipio || {};
                const dept = d?.ubicacion?.departamento || {};

                // Provincia
                provinciaInput.value = prov.nombre || "";
                provIdHidden.value   = prov.id     || "";

                // Ciudad/Localidad: municipio si existe; si no, departamento
                const cityName = muni.nombre || dept.nombre || "";
                const cityId   = muni.id     || dept.id     || "";
                ciudadInput.value = cityName;
                ciuIdHidden.value = cityId;
            } catch { /* noop */ }

            // 2) Dirección (calle y altura) con Nominatim
            try {
                const rN = await fetch(
                    `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}&addressdetails=1`,
                    { headers: { "Accept-Language": "es" } }
                );
                const j = await rN.json();
                const a = j.address || {};
                const road   = a.road || a.pedestrian || a.footway || a.path || a.cycleway;
                const house  = a.house_number;
                const suburb = a.suburb || a.neighbourhood || a.village || a.hamlet;

                const parts = [];
                if (road && house) parts.push(`${road} ${house}`); else if (road) parts.push(road);
                if (suburb) parts.push(suburb);

                const built = parts.join(", ");
                if (built) {
                    direccionInput.value = built;
                } else if (j.display_name) {
                    direccionInput.value = j.display_name.split(",").slice(0, 3).join(", ").trim();
                }
            } catch { /* noop */ }
        }, 600);

        // Eventos mapa/marker
        marker.on("dragend", () => {
            const { lat, lng } = marker.getLatLng();
            setLatLon(lat, lng);
            reverseFromMap(lat, lng);
        });
        map.on("click", (e) => {
            marker.setLatLng(e.latlng);
            setLatLon(e.latlng.lat, e.latlng.lng);
            reverseFromMap(e.latlng.lat, e.latlng.lng);
        });

        // Geolocalización del usuario → si falla, fallback UTN FRRe
        function initPosition(lat, lon, zoom = 16) {
            map.setView([lat, lon], zoom);
            marker.setLatLng([lat, lon]);
            setLatLon(lat, lon);
            reverseFromMap(lat, lon);
        }

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (pos) => {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;
                    initPosition(lat, lon, 16);
                },
                () => {
                    // Error o denegado → FRRe
                    initPosition(FALLBACK.lat, FALLBACK.lon, FALLBACK.zoom);
                },
                { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
            );
        } else {
            initPosition(FALLBACK.lat, FALLBACK.lon, FALLBACK.zoom);
        }

        // Validación: obligar a elegir en el mapa (coords + campos completos)
        document.getElementById("formCreate").addEventListener("submit", (ev) => {
            const hasCoords = latHidden.value.trim() !== "" && lonHidden.value.trim() !== "";
            const hasProv   = provinciaInput.value.trim() !== "";
            const hasCity   = ciudadInput.value.trim() !== "";
            const hasAddr   = direccionInput.value.trim() !== "";
            if (!hasCoords || !hasProv || !hasCity || !hasAddr) {
                ev.preventDefault();
                ev.stopPropagation();
                alert("Elegí la ubicación en el mapa. Se completan provincia, ciudad y dirección automáticamente.");
            }
        });

        // Piso "Otro"
        const pisoSelect = $("pisoSelect");
        const pisoInput  = $("pisoInput");
        const pisoHidden = $("pisoHidden");
        pisoSelect.addEventListener("change", () => {
            if (pisoSelect.value === "__OTRO__") {
                pisoInput.classList.remove("d-none");
                pisoInput.disabled = false;
                pisoInput.focus();
            } else {
                pisoInput.classList.add("d-none");
                pisoInput.disabled = true;
                pisoHidden.value = pisoSelect.value || "";
            }
        });
        pisoInput.addEventListener("input", () => {
            pisoHidden.value = pisoInput.value.trim();
        });
    </script>
}
